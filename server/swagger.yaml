swagger: '2.0'
info:
  version: 1.0.0
  title: Book-A-Meal
  description: API for Book-A-Meal
  # My Contact Info
  contact:
    email: odumahs@gmail.com
basePath: /api/v1

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

# tags are used for organizing operations
tags:
- name: meals
  description: Operations for meal
- name: menu
  description: Operations for menu
- name: auth
  description: Operations for user details
- name: orders
  description: Operations for orders


paths:
  /auth/signin:
    post:
      tags:
      - auth
      summary: signin a user
      description: Log in a user to the application
      produces:
      - application/json
      parameters:
      - name: email
        in: formData
        description: email of the user
        type: string
        required: true
      - name: password
        in: formData
        description: password of the user
        type: string
        required: true
      responses:
        200:
          description: Success, user is logged in
          examples:
            application/json:
              status: success
              message: 'logged in'
              token: eyJhbGciOiJIUzI1NiIdssdjR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTIxMTk0MTE0LCJleHAiOjE1MjI0MDM3MTR9.OeN-Tut9xAg8wYUvC-RPLbTqIcGXH5zZamP_o5wTZrc
              user:
                username: admin
        400:
          description: Invalid Input
          examples:
            application/json:
              status: error
              message: Enter a valid email

  /auth/signup:
    post:
      tags:
      - auth
      summary: Signup a user
      description: Signup user into the application
      produces:
      - application/json
      parameters:
      - name: email
        in: formData
        description: email of the user
        type: string
        required: true
      - name: password
        in: formData
        description: password of the user
        type: string
        required: true
      - name: username
        in: formData
        description: UserName
        type: string
        required: true
      - name: role
        in: formData
        description: User role
        type: string
        required: true

      responses:
        201:
          description: Success, user is signed up
          examples:
            application/json:
              status: success
              message: 'User created and logged in'
              token: eyJhbGciOiJIUzI1NiIdssdjR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTIxMTk0MTE0LCJleHAiOjE1MjI0MDM3MTR9.OeN-Tut9xAg8wYUvC-RPLbTqIcGXH5zZamP_o5wTZrc
              user:
                username: admin
                email: admin@gmail.com
                role: caterer
        400:
          description: Invalid Input
          examples:
            application/json:
              status: error
              message: Enter valid email

  /meals:
    get: 
      tags:
      - meals
      summary: Get all meals 
      description: Returns a list containing all meals
      security:
      - Bearer: []
      produces:
      - application/json
      responses:
        200:
          description: A list of meals
          examples:
            application/json:
              status: success
              meal:
              - id: 1
                name: Rice
                price: 350
                imgPath: images/riceimage.png

              - id: 2
                name: Beans
                price: 350
                imgPath: images/beansimage.png
    post:
      tags:
      - meals
      summary: Add a meal
      description: Add a new meal 
      produces:
      - application/json
      parameters:
      - in: formData
        name: name
        type: string
        description: Name of meal
        required: true
      - in: formData
        name: price
        type: integer
        description: Price of meal
        required: true
      - in: formData
        name: imgPath
        type: string
        description: path to meal image
        required: true
      - in: formData
        name: token
        type: string
        description: Token for accessing the endpoint
        required: true
      responses:
        201:
          description: Created meal successfully
          examples:
            application/json:
              status: success
              message: Meal added
              meal:
                id: 1
                name: Rice
                price: 350
                imgPath: images/riceimage.png
        400: 
          description: Invalid input
          examples:
            application/json:
              status: error
              message: Enter valid meal name

  /meals/{id}:
    put:
      tags:
      - meals
      summary: update specific meal
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        required: true
        description: the id of the meal to be updated
        type: integer
      - in: formData
        name: name
        type: string
        description: Name of meal
        required: true
      - in: formData
        name: price
        type: integer
        description: Price of meal
        required: true
      - in: formData
        name: imgPath
        type: string
        description: path to meal image
        required: true
      - in: formData
        name: token
        type: string
        description: Token for accessing the endpoint
        required: true
      responses:
        200:
          description: Update meal successfully
          examples:
            application/json:
              status: success
              message: Meal updated successfully
              meal:
                id: 1
                name: Rice
                price: 350
                imgPath: images/riceimage.png
                token: eyJhbGciOiJIUzI1NiIdssdjR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTIxMTk0MTE0LCJleHAiOjE1MjI0MDM3MTR9.OeN-Tut9xAg8wYUvC-RPLbTqIcGXH5zZamP_o5wTZrc
        404: 
          description: meal not found
          examples:
            application/json:
              status: error
              message: Meal not found
    delete:
      tags:
      - meals
      summary: deletes specific meal
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        required: true
        description: the id of the meal to delete
        type: integer
      - in: formData
        name: token
        type: string
        description: Token for accessing endpoint
        required: true
      responses:
        200:
          description: Meal deleted
          examples:
            application/json:
              status: success
              message: Meal deleted successfully
        401: 
          description: Forbidden
          examples:
            application/json:
              status: error
              message: 'You do not have permission to perfom this action'
        400:
          description: Meal could not be found
          examples: 
            application/json:
              status: error
              message: 'Meal not found'


  /menu:
    post:
      tags:
      - menu
      summary: Set menu for the day
      description: Sets menu for the day
      produces: 
      - application/json
      parameters:
      - in: formData
        name: ids
        type: array
        description: meal ids to be added to menu
        required: true
      - in: formData
        name: available
        type: boolean
        description: determines if meal is available for that day
        required: true
      - in: formData
        name: token
        type: string
        description: Token for accessing the endpoint
        required: true
      responses: 
        201:
          description: Success, Menu set for the day
          examples: 
            application/json:
              status: success
              message: 'Menu set for the day'
        500:
          description: An unexpected error occured
          examples:
            application/json:
              status: error
              message: 'Something went wrong'
    get:
      tags:
      - menu
      summary: Get menu for the day
      description: Gets menu for the day
      security:
      - Bearer: []
      produces:
      - application/json
      responses:
        200:
          description: A list of menu for the day
          examples: 
            application/json:
              status: success
              message: 'Menu for the day'
              menu:
                - id: 1
                  available: true
                  meal:
                    name: Rice
                    price: 350
                    imgPath: images/riceimage.jpg

  /orders:
    post: 
      tags:
      - orders
      summary: place an order
      description: Place an order 
      produces: 
      - application/json
      parameters:
      - in: formData
        name: quantity
        type: integer
        description: total number of meals needed
        required: true
      - in: formData
        name: total
        type: integer
        description: Total price for meal ordered
        required: true
      - in: formData
        name: deliveryAddress
        type: string
        description: Delivery address for order
        required: true
      - in: formData
        name: status
        type: string
        description: Order status
        required: true
      - in: formData
        name: token
        type: string
        description: Token for accessing the endpoint
        required: true
      responses:
        201:
          description: Success, Place an order 
          examples:
            application/json:
              status: success
              message: Order placed
              order:
                id: 1
                meal: Rice
                quantity: 2
                total: 700
                deliveryAddress: 'EPIC towers'
                status: pending
        500:
          description: An unexpected error occured
          examples:
            application/json:
              status: error
              message: 'Something went wrong'

    get:
      tags:
      - orders
      summary: Get All orders
      description: Get orders for the day
      security:
      - Bearer: []
      produces:
      - application/json
      responses:
        200:
          description: A list of orders for the day
          examples: 
            application/json:
              status: success
              message: 'Current Orders'
              orders:
                - id: 1
                  quantity: 4
                  total: 1050
                  deliveryAddress: 'EPIC towers'
                  status: pending
                  meal:
                    name: Rice
        400:
          description: No order available
          examples:
            application/json:
              status: error
              message: 'No order available'

  /orders/{id}:
    put:
      tags:
      - orders
      summary: update specific order
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        required: true
        description: the id of the order to be updated
        type: integer
      - in: formData
        name: quantity
        type: integer
        description: total number of meals needed
        required: true
      - in: formData
        name: total
        type: integer
        description: Total price for meal ordered
        required: true
      - in: formData
        name: deliveryAddress
        type: string
        description: Delivery address for order
        required: true
      - in: formData
        name: status
        type: string
        description: Order status
        required: true
      - in: formData
        name: token
        type: string
        description: Token for accessing the endpoint
        required: true
      responses:
        200:
          description: Update order successfully
          examples:
            application/json:
              status: success
              message: Order modified successfully
              order:
                quantity: 2
                total: 700
                deliveryAddress: 'EPIC towers'
                status: pending
        400: 
          description: Order not found
          examples:
            application/json:
              status: error
              message: Order not found
